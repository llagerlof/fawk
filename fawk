#!/bin/awk -f

BEGIN {

	# Show help if number of arguments is fewer than 2.
	if (ARGC < 3) {
		print;
		print "fawk 1.2";
		print;
		print "Description:"
		print "	fawk is a script to find text inside files. Easy to use and nice output, get the job done."
		print
		print "Usage:"
		print "	fawk \"<string>\" <files> [-f]"
		print
		print "Options:"
		print "	-f = output only the filenames, not the lines containing the searched string."
		print;
		print "Examples:"
		print "	Search all files containing \"string to search\" inside all php files:"
		print;
		print "		fawk \"string to search\" *.php"
		print;
		print "	Search all files containing \"string to search\" inside all php files, but show only the filenames:"
		print;
		print "		fawk \"string to search\" *.php -f"
		print;
		print "	Search recursively in directories all files containing \"text to search\" inside all txt files:"
		print;
		print "		find . -type f -name \\*.txt -exec fawk \"text to search\" {} \\;"
		print;
		print "	Search recursively in directories all files containing \"text to search\" inside all txt files, but show only the filenames:"
		print;
		print "		find . -type f -name \\*.txt -exec fawk \"text to search\" {} -f \\;"
	}

	# Get the string passed as argument to this script.
	search_filter=ARGV[1];

	# Check if "files only" parameter is set.
	files_only=0;
	if (ARGV[ARGC-1] == "-f") {
		files_only = 1;
	}

	# Loop in files
	for (i = 2; i < (ARGC-files_only); i++) {
		NR=1; # line number
		lines_found="";

		# Loop in lines of file
		while(( getline line<ARGV[i]) > 0 ) {
			# Get only lines containing the search string.
			if (index(line, search_filter) > 0) {
				lines_found=lines_found "   {" NR "}" " " line "\n";
			}
			NR++;
  		}

		# Show only filenames if the search string was found
		if (lines_found != "") {
			print ARGV[i];
			if (files_only != 1) {
				print lines_found;
			}
		}
	}
}
